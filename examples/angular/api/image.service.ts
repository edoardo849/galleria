/**
 * Progimage
 * <p> ProgImage is designed as a specialised image storage and processing engine to be used by other applications, and will (only) provide highperformance  access via its API. </p> <p> ProgImage provides a number of image processing and transformation capabilities  such as compression, rotation, a variety of filters, thumbnail creation, and masking. </p> <p> These capabilities are all delivered as a set of highperformance web-services that can  operate on images provided as data in a request, operate on a remote image via a URL,  or on images that are already in the repository. </p> 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Convert } from '../model/convert';
import { Id } from '../model/id';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ImageService {

    protected basePath = 'http://35.197.243.170:8081/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Convert an image from a format to another
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public imageConvert(body?: Convert, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public imageConvert(body?: Convert, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public imageConvert(body?: Convert, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public imageConvert(body?: Convert, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'image/png',
            'image/jpg',
            'image/tiff',
            'image/gif',
            'image/bmp',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (image !== undefined) {
            formParams = formParams.append('image', <any>image) || formParams;
        }
        if (filename !== undefined) {
            formParams = formParams.append('filename', <any>filename) || formParams;
        }
        if (to !== undefined) {
            formParams = formParams.append('to', <any>to) || formParams;
        }
        if (from !== undefined) {
            formParams = formParams.append('from', <any>from) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/image/convert`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Convert an image from a format to another
     * 
     * @param image 
     * @param filename 
     * @param to 
     * @param from 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public imageConvert(image?: string, filename?: string, to?: string, from?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public imageConvert(image?: string, filename?: string, to?: string, from?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public imageConvert(image?: string, filename?: string, to?: string, from?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public imageConvert(image?: string, filename?: string, to?: string, from?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'image/png',
            'image/jpg',
            'image/tiff',
            'image/gif',
            'image/bmp',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (image !== undefined) {
            formParams = formParams.append('image', <any>image) || formParams;
        }
        if (filename !== undefined) {
            formParams = formParams.append('filename', <any>filename) || formParams;
        }
        if (to !== undefined) {
            formParams = formParams.append('to', <any>to) || formParams;
        }
        if (from !== undefined) {
            formParams = formParams.append('from', <any>from) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/image/convert`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Convert an image
     * 
     * @param imageId The id of the image stored in the cache
     * @param format The conversion format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public imageConvertFromCache(imageId: string, format: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public imageConvertFromCache(imageId: string, format: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public imageConvertFromCache(imageId: string, format: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public imageConvertFromCache(imageId: string, format: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (imageId === null || imageId === undefined) {
            throw new Error('Required parameter imageId was null or undefined when calling imageConvertFromCache.');
        }

        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling imageConvertFromCache.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'image/png',
            'image/jpg',
            'image/tiff',
            'image/gif',
            'image/bmp',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/image/${encodeURIComponent(String(imageId))}.${encodeURIComponent(String(format))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Uploads an image
     * 
     * @param image 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public imageCreate(image?: string, observe?: 'body', reportProgress?: boolean): Observable<Id>;
    public imageCreate(image?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Id>>;
    public imageCreate(image?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Id>>;
    public imageCreate(image?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (image !== undefined) {
            formParams = formParams.append('image', <any>image) || formParams;
        }

        return this.httpClient.post<Id>(`${this.basePath}/image`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get an image
     * 
     * @param imageId The id of the image to retrieve
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public imageGet(imageId: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public imageGet(imageId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public imageGet(imageId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public imageGet(imageId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (imageId === null || imageId === undefined) {
            throw new Error('Required parameter imageId was null or undefined when calling imageGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'image/png',
            'image/jpg',
            'image/tiff',
            'image/gif',
            'image/bmp',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/image/${encodeURIComponent(String(imageId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Convert an image from a format to another by specifying an Url
     * 
     * @param image 
     * @param width 
     * @param height 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public thumbnail(image?: string, width?: number, height?: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public thumbnail(image?: string, width?: number, height?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public thumbnail(image?: string, width?: number, height?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public thumbnail(image?: string, width?: number, height?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'image/jpg',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (image !== undefined) {
            formParams = formParams.append('image', <any>image) || formParams;
        }
        if (width !== undefined) {
            formParams = formParams.append('width', <any>width) || formParams;
        }
        if (height !== undefined) {
            formParams = formParams.append('height', <any>height) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/image/thumbnail`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
